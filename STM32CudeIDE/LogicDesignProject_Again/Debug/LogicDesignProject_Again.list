
LogicDesignProject_Again.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002acc  08002acc  00012acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b94  08002b94  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002b94  08002b94  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b94  08002b94  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000028  08002bc4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002bc4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009444  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e07  00000000  00000000  00029495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176d6  00000000  00000000  0002c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdd3  00000000  00000000  00043d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846c7  00000000  00000000  00050b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d51f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  000d5248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ab4 	.word	0x08002ab4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002ab4 	.word	0x08002ab4

0800014c <trafficDisplay1>:
	if(timer_flag[3] == 1){
		setTimer(1000 , 3);
		HAL_GPIO_TogglePin(TOGGLE_LED_GPIO_Port, TOGGLE_LED_Pin);
	}
}
void trafficDisplay1(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (index){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d84a      	bhi.n	80001f0 <trafficDisplay1+0xa4>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <trafficDisplay1+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	080001d1 	.word	0x080001d1
 8000164:	08000171 	.word	0x08000171
 8000168:	08000191 	.word	0x08000191
 800016c:	080001b1 	.word	0x080001b1
		case RED:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8000170:	2200      	movs	r2, #0
 8000172:	2101      	movs	r1, #1
 8000174:	4820      	ldr	r0, [pc, #128]	; (80001f8 <trafficDisplay1+0xac>)
 8000176:	f001 fc5e 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	2102      	movs	r1, #2
 800017e:	481e      	ldr	r0, [pc, #120]	; (80001f8 <trafficDisplay1+0xac>)
 8000180:	f001 fc59 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8000184:	2201      	movs	r2, #1
 8000186:	2110      	movs	r1, #16
 8000188:	481b      	ldr	r0, [pc, #108]	; (80001f8 <trafficDisplay1+0xac>)
 800018a:	f001 fc54 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 800018e:	e02f      	b.n	80001f0 <trafficDisplay1+0xa4>
		case YELLOW:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	2101      	movs	r1, #1
 8000194:	4818      	ldr	r0, [pc, #96]	; (80001f8 <trafficDisplay1+0xac>)
 8000196:	f001 fc4e 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	2102      	movs	r1, #2
 800019e:	4816      	ldr	r0, [pc, #88]	; (80001f8 <trafficDisplay1+0xac>)
 80001a0:	f001 fc49 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2110      	movs	r1, #16
 80001a8:	4813      	ldr	r0, [pc, #76]	; (80001f8 <trafficDisplay1+0xac>)
 80001aa:	f001 fc44 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 80001ae:	e01f      	b.n	80001f0 <trafficDisplay1+0xa4>
		case GREEN:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2101      	movs	r1, #1
 80001b4:	4810      	ldr	r0, [pc, #64]	; (80001f8 <trafficDisplay1+0xac>)
 80001b6:	f001 fc3e 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2102      	movs	r1, #2
 80001be:	480e      	ldr	r0, [pc, #56]	; (80001f8 <trafficDisplay1+0xac>)
 80001c0:	f001 fc39 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2110      	movs	r1, #16
 80001c8:	480b      	ldr	r0, [pc, #44]	; (80001f8 <trafficDisplay1+0xac>)
 80001ca:	f001 fc34 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 80001ce:	e00f      	b.n	80001f0 <trafficDisplay1+0xa4>
		case INIT:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2101      	movs	r1, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <trafficDisplay1+0xac>)
 80001d6:	f001 fc2e 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80001da:	2201      	movs	r2, #1
 80001dc:	2102      	movs	r1, #2
 80001de:	4806      	ldr	r0, [pc, #24]	; (80001f8 <trafficDisplay1+0xac>)
 80001e0:	f001 fc29 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2110      	movs	r1, #16
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <trafficDisplay1+0xac>)
 80001ea:	f001 fc24 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 80001ee:	bf00      	nop
	}
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	40010800 	.word	0x40010800

080001fc <trafficDisplay2>:
void trafficDisplay2(int index){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	switch (index){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b03      	cmp	r3, #3
 8000208:	d84a      	bhi.n	80002a0 <trafficDisplay2+0xa4>
 800020a:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <trafficDisplay2+0x14>)
 800020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000210:	08000281 	.word	0x08000281
 8000214:	08000221 	.word	0x08000221
 8000218:	08000241 	.word	0x08000241
 800021c:	08000261 	.word	0x08000261
		case RED:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 8000220:	2200      	movs	r2, #0
 8000222:	2101      	movs	r1, #1
 8000224:	4820      	ldr	r0, [pc, #128]	; (80002a8 <trafficDisplay2+0xac>)
 8000226:	f001 fc06 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 800022a:	2201      	movs	r2, #1
 800022c:	2102      	movs	r1, #2
 800022e:	481f      	ldr	r0, [pc, #124]	; (80002ac <trafficDisplay2+0xb0>)
 8000230:	f001 fc01 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	481c      	ldr	r0, [pc, #112]	; (80002ac <trafficDisplay2+0xb0>)
 800023a:	f001 fbfc 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 800023e:	e02f      	b.n	80002a0 <trafficDisplay2+0xa4>
		case YELLOW:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	2101      	movs	r1, #1
 8000244:	4818      	ldr	r0, [pc, #96]	; (80002a8 <trafficDisplay2+0xac>)
 8000246:	f001 fbf6 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 0);
 800024a:	2200      	movs	r2, #0
 800024c:	2102      	movs	r1, #2
 800024e:	4817      	ldr	r0, [pc, #92]	; (80002ac <trafficDisplay2+0xb0>)
 8000250:	f001 fbf1 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	4814      	ldr	r0, [pc, #80]	; (80002ac <trafficDisplay2+0xb0>)
 800025a:	f001 fbec 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 800025e:	e01f      	b.n	80002a0 <trafficDisplay2+0xa4>
		case GREEN:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	2101      	movs	r1, #1
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <trafficDisplay2+0xac>)
 8000266:	f001 fbe6 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	2102      	movs	r1, #2
 800026e:	480f      	ldr	r0, [pc, #60]	; (80002ac <trafficDisplay2+0xb0>)
 8000270:	f001 fbe1 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	2101      	movs	r1, #1
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <trafficDisplay2+0xb0>)
 800027a:	f001 fbdc 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 800027e:	e00f      	b.n	80002a0 <trafficDisplay2+0xa4>
		case INIT:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2101      	movs	r1, #1
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <trafficDisplay2+0xac>)
 8000286:	f001 fbd6 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	2102      	movs	r1, #2
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <trafficDisplay2+0xb0>)
 8000290:	f001 fbd1 	bl	8001a36 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000294:	2201      	movs	r2, #1
 8000296:	2101      	movs	r1, #1
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <trafficDisplay2+0xb0>)
 800029a:	f001 fbcc 	bl	8001a36 <HAL_GPIO_WritePin>
					break;
 800029e:	bf00      	nop
	}
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40010c00 	.word	0x40010c00
 80002ac:	40011000 	.word	0x40011000

080002b0 <trafficToggle>:
void trafficToggle(int index){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	if(index!=RED) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d009      	beq.n	80002d2 <trafficToggle+0x22>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80002be:	2201      	movs	r2, #1
 80002c0:	2101      	movs	r1, #1
 80002c2:	482c      	ldr	r0, [pc, #176]	; (8000374 <trafficToggle+0xc4>)
 80002c4:	f001 fbb7 	bl	8001a36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2101      	movs	r1, #1
 80002cc:	482a      	ldr	r0, [pc, #168]	; (8000378 <trafficToggle+0xc8>)
 80002ce:	f001 fbb2 	bl	8001a36 <HAL_GPIO_WritePin>
	}

	if(index!=YELLOW) {
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	d009      	beq.n	80002ec <trafficToggle+0x3c>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80002d8:	2201      	movs	r2, #1
 80002da:	2102      	movs	r1, #2
 80002dc:	4825      	ldr	r0, [pc, #148]	; (8000374 <trafficToggle+0xc4>)
 80002de:	f001 fbaa 	bl	8001a36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2102      	movs	r1, #2
 80002e6:	4825      	ldr	r0, [pc, #148]	; (800037c <trafficToggle+0xcc>)
 80002e8:	f001 fba5 	bl	8001a36 <HAL_GPIO_WritePin>
	}
	if(index!=GREEN) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d009      	beq.n	8000306 <trafficToggle+0x56>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2110      	movs	r1, #16
 80002f6:	481f      	ldr	r0, [pc, #124]	; (8000374 <trafficToggle+0xc4>)
 80002f8:	f001 fb9d 	bl	8001a36 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2101      	movs	r1, #1
 8000300:	481e      	ldr	r0, [pc, #120]	; (800037c <trafficToggle+0xcc>)
 8000302:	f001 fb98 	bl	8001a36 <HAL_GPIO_WritePin>
	}

	if(timer_flag[2] == 1){
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <trafficToggle+0xd0>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d12c      	bne.n	8000368 <trafficToggle+0xb8>
		setTimer(500, 2);
 800030e:	2102      	movs	r1, #2
 8000310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000314:	f000 ff72 	bl	80011fc <setTimer>
		//TODO
		switch(index){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b03      	cmp	r3, #3
 800031c:	d01b      	beq.n	8000356 <trafficToggle+0xa6>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b03      	cmp	r3, #3
 8000322:	dc22      	bgt.n	800036a <trafficToggle+0xba>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d003      	beq.n	8000332 <trafficToggle+0x82>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d009      	beq.n	8000344 <trafficToggle+0x94>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
			break;
		}
	}
}
 8000330:	e01b      	b.n	800036a <trafficToggle+0xba>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000332:	2101      	movs	r1, #1
 8000334:	480f      	ldr	r0, [pc, #60]	; (8000374 <trafficToggle+0xc4>)
 8000336:	f001 fb96 	bl	8001a66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 800033a:	2101      	movs	r1, #1
 800033c:	480e      	ldr	r0, [pc, #56]	; (8000378 <trafficToggle+0xc8>)
 800033e:	f001 fb92 	bl	8001a66 <HAL_GPIO_TogglePin>
			break;
 8000342:	e012      	b.n	800036a <trafficToggle+0xba>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000344:	2102      	movs	r1, #2
 8000346:	480b      	ldr	r0, [pc, #44]	; (8000374 <trafficToggle+0xc4>)
 8000348:	f001 fb8d 	bl	8001a66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 800034c:	2102      	movs	r1, #2
 800034e:	480b      	ldr	r0, [pc, #44]	; (800037c <trafficToggle+0xcc>)
 8000350:	f001 fb89 	bl	8001a66 <HAL_GPIO_TogglePin>
			break;
 8000354:	e009      	b.n	800036a <trafficToggle+0xba>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000356:	2110      	movs	r1, #16
 8000358:	4806      	ldr	r0, [pc, #24]	; (8000374 <trafficToggle+0xc4>)
 800035a:	f001 fb84 	bl	8001a66 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 800035e:	2101      	movs	r1, #1
 8000360:	4806      	ldr	r0, [pc, #24]	; (800037c <trafficToggle+0xcc>)
 8000362:	f001 fb80 	bl	8001a66 <HAL_GPIO_TogglePin>
			break;
 8000366:	e000      	b.n	800036a <trafficToggle+0xba>
	}
 8000368:	bf00      	nop
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00
 800037c:	40011000 	.word	0x40011000
 8000380:	200000ec 	.word	0x200000ec

08000384 <Led_Status>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {0, 0, 0, 0};

void Led_Status(int LedArray[7]){
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_WritePin ( SEG0_GPIO_Port, SEG0_Pin , LedArray[0]);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	461a      	mov	r2, r3
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	481f      	ldr	r0, [pc, #124]	; (8000414 <Led_Status+0x90>)
 8000398:	f001 fb4d 	bl	8001a36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_GPIO_Port, SEG1_Pin , LedArray[1]);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3304      	adds	r3, #4
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	2140      	movs	r1, #64	; 0x40
 80003a8:	481b      	ldr	r0, [pc, #108]	; (8000418 <Led_Status+0x94>)
 80003aa:	f001 fb44 	bl	8001a36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_GPIO_Port, SEG2_Pin , LedArray[2]);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3308      	adds	r3, #8
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	4818      	ldr	r0, [pc, #96]	; (800041c <Led_Status+0x98>)
 80003bc:	f001 fb3b 	bl	8001a36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_GPIO_Port, SEG3_Pin , LedArray[3]);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	330c      	adds	r3, #12
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	2140      	movs	r1, #64	; 0x40
 80003cc:	4813      	ldr	r0, [pc, #76]	; (800041c <Led_Status+0x98>)
 80003ce:	f001 fb32 	bl	8001a36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_GPIO_Port, SEG4_Pin , LedArray[4]);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3310      	adds	r3, #16
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	2120      	movs	r1, #32
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <Led_Status+0x98>)
 80003e0:	f001 fb29 	bl	8001a36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG5_GPIO_Port, SEG5_Pin , LedArray[5]);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3314      	adds	r3, #20
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	461a      	mov	r2, r3
 80003ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f2:	4809      	ldr	r0, [pc, #36]	; (8000418 <Led_Status+0x94>)
 80003f4:	f001 fb1f 	bl	8001a36 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG6_GPIO_Port, SEG6_Pin , LedArray[6]);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3318      	adds	r3, #24
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	461a      	mov	r2, r3
 8000402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <Led_Status+0x94>)
 8000408:	f001 fb15 	bl	8001a36 <HAL_GPIO_WritePin>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40011000 	.word	0x40011000
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800

08000420 <display7SEG>:

void display7SEG(int num){
 8000420:	b5b0      	push	{r4, r5, r7, lr}
 8000422:	b0d0      	sub	sp, #320	; 0x140
 8000424:	af00      	add	r7, sp, #0
 8000426:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800042a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800042e:	6018      	str	r0, [r3, #0]
	switch(num){
 8000430:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000434:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	f200 80ed 	bhi.w	800061a <display7SEG+0x1fa>
 8000440:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <display7SEG+0x28>)
 8000442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000446:	bf00      	nop
 8000448:	08000471 	.word	0x08000471
 800044c:	080004a7 	.word	0x080004a7
 8000450:	080004c7 	.word	0x080004c7
 8000454:	080004e7 	.word	0x080004e7
 8000458:	08000507 	.word	0x08000507
 800045c:	08000527 	.word	0x08000527
 8000460:	08000547 	.word	0x08000547
 8000464:	0800057b 	.word	0x0800057b
 8000468:	0800059b 	.word	0x0800059b
 800046c:	080005bb 	.word	0x080005bb
		case 0: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 8000470:	2300      	movs	r3, #0
 8000472:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000476:	2300      	movs	r3, #0
 8000478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800047c:	2300      	movs	r3, #0
 800047e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000482:	2300      	movs	r3, #0
 8000484:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000488:	2300      	movs	r3, #0
 800048a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800048e:	2300      	movs	r3, #0
 8000490:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000494:	2301      	movs	r3, #1
 8000496:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					Led_Status(LedArray);
 800049a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff70 	bl	8000384 <Led_Status>
				}
		break;
 80004a4:	e0e9      	b.n	800067a <display7SEG+0x25a>

		case 1: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 1, 1};
 80004a6:	4b77      	ldr	r3, [pc, #476]	; (8000684 <display7SEG+0x264>)
 80004a8:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80004ac:	461d      	mov	r5, r3
 80004ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80004ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff60 	bl	8000384 <Led_Status>
				}
				break;
 80004c4:	e0d9      	b.n	800067a <display7SEG+0x25a>
		case 2: {
					int LedArray[7] = { 0, 0, 1, 0, 0, 1, 0};
 80004c6:	4b70      	ldr	r3, [pc, #448]	; (8000688 <display7SEG+0x268>)
 80004c8:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80004cc:	461d      	mov	r5, r3
 80004ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80004da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff50 	bl	8000384 <Led_Status>
				}
				break;
 80004e4:	e0c9      	b.n	800067a <display7SEG+0x25a>
		case 3: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 1, 0};
 80004e6:	4b69      	ldr	r3, [pc, #420]	; (800068c <display7SEG+0x26c>)
 80004e8:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80004ec:	461d      	mov	r5, r3
 80004ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80004fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff40 	bl	8000384 <Led_Status>
				}
				break;
 8000504:	e0b9      	b.n	800067a <display7SEG+0x25a>
		case 4: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 0, 0};
 8000506:	4b62      	ldr	r3, [pc, #392]	; (8000690 <display7SEG+0x270>)
 8000508:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800050c:	461d      	mov	r5, r3
 800050e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000512:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800051a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff30 	bl	8000384 <Led_Status>
				}
				break;
 8000524:	e0a9      	b.n	800067a <display7SEG+0x25a>
		case 5: {
					int LedArray[7] = { 0, 1, 0, 0, 1, 0, 0};
 8000526:	4b5b      	ldr	r3, [pc, #364]	; (8000694 <display7SEG+0x274>)
 8000528:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800053a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff20 	bl	8000384 <Led_Status>
				}
				break;
 8000544:	e099      	b.n	800067a <display7SEG+0x25a>
		case 6: {
					int LedArray[7] = { 0, 1, 0, 0, 0, 0, 0};
 8000546:	2300      	movs	r3, #0
 8000548:	67fb      	str	r3, [r7, #124]	; 0x7c
 800054a:	2301      	movs	r3, #1
 800054c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000568:	2300      	movs	r3, #0
 800056a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					Led_Status(LedArray);
 800056e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff06 	bl	8000384 <Led_Status>
				}
				break;
 8000578:	e07f      	b.n	800067a <display7SEG+0x25a>
		case 7: {
					int LedArray[7] = { 0, 0, 0, 1, 1, 1, 1};
 800057a:	4b47      	ldr	r3, [pc, #284]	; (8000698 <display7SEG+0x278>)
 800057c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800058e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fef6 	bl	8000384 <Led_Status>
				}
				break;
 8000598:	e06f      	b.n	800067a <display7SEG+0x25a>
		case 8: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 0};
 800059a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 80005ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fee6 	bl	8000384 <Led_Status>
				}
				break;
 80005b8:	e05f      	b.n	800067a <display7SEG+0x25a>
		case 9: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 0, 0};
 80005ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005be:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005f2:	2201      	movs	r2, #1
 80005f4:	611a      	str	r2, [r3, #16]
 80005f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
 8000602:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000606:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff feb6 	bl	8000384 <Led_Status>
				}
				break;
 8000618:	e02f      	b.n	800067a <display7SEG+0x25a>
		default: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 800061a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800061e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800062a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000636:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000642:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800064e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800065a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000666:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800066a:	2201      	movs	r2, #1
 800066c:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fe86 	bl	8000384 <Led_Status>
				}
				break;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000680:	46bd      	mov	sp, r7
 8000682:	bdb0      	pop	{r4, r5, r7, pc}
 8000684:	08002acc 	.word	0x08002acc
 8000688:	08002ae8 	.word	0x08002ae8
 800068c:	08002b04 	.word	0x08002b04
 8000690:	08002b20 	.word	0x08002b20
 8000694:	08002b3c 	.word	0x08002b3c
 8000698:	08002b58 	.word	0x08002b58

0800069c <update7SEG>:
void update7SEG( int index ){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	if(index_led >= MAX_LED) index_led = 0;
 80006a4:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <update7SEG+0x128>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2204      	movs	r2, #4
 80006aa:	4293      	cmp	r3, r2
 80006ac:	db02      	blt.n	80006b4 <update7SEG+0x18>
 80006ae:	4b45      	ldr	r3, [pc, #276]	; (80007c4 <update7SEG+0x128>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
	switch ( index ){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d87e      	bhi.n	80007b8 <update7SEG+0x11c>
 80006ba:	a201      	add	r2, pc, #4	; (adr r2, 80006c0 <update7SEG+0x24>)
 80006bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c0:	080006d1 	.word	0x080006d1
 80006c4:	0800070b 	.word	0x0800070b
 80006c8:	08000745 	.word	0x08000745
 80006cc:	0800077f 	.word	0x0800077f
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2110      	movs	r1, #16
 80006d4:	483c      	ldr	r0, [pc, #240]	; (80007c8 <update7SEG+0x12c>)
 80006d6:	f001 f9ae 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	4839      	ldr	r0, [pc, #228]	; (80007c8 <update7SEG+0x12c>)
 80006e2:	f001 f9a8 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	4837      	ldr	r0, [pc, #220]	; (80007cc <update7SEG+0x130>)
 80006ee:	f001 f9a2 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4834      	ldr	r0, [pc, #208]	; (80007cc <update7SEG+0x130>)
 80006fa:	f001 f99c 	bl	8001a36 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <update7SEG+0x134>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe8c 	bl	8000420 <display7SEG>
		break ;
 8000708:	e057      	b.n	80007ba <update7SEG+0x11e>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 800070a:	2201      	movs	r2, #1
 800070c:	2110      	movs	r1, #16
 800070e:	482e      	ldr	r0, [pc, #184]	; (80007c8 <update7SEG+0x12c>)
 8000710:	f001 f991 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,0);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	482b      	ldr	r0, [pc, #172]	; (80007c8 <update7SEG+0x12c>)
 800071c:	f001 f98b 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000726:	4829      	ldr	r0, [pc, #164]	; (80007cc <update7SEG+0x130>)
 8000728:	f001 f985 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000732:	4826      	ldr	r0, [pc, #152]	; (80007cc <update7SEG+0x130>)
 8000734:	f001 f97f 	bl	8001a36 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <update7SEG+0x134>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe6f 	bl	8000420 <display7SEG>
		break ;
 8000742:	e03a      	b.n	80007ba <update7SEG+0x11e>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 8000744:	2201      	movs	r2, #1
 8000746:	2110      	movs	r1, #16
 8000748:	481f      	ldr	r0, [pc, #124]	; (80007c8 <update7SEG+0x12c>)
 800074a:	f001 f974 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000754:	481c      	ldr	r0, [pc, #112]	; (80007c8 <update7SEG+0x12c>)
 8000756:	f001 f96e 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,0);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	481a      	ldr	r0, [pc, #104]	; (80007cc <update7SEG+0x130>)
 8000762:	f001 f968 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	4817      	ldr	r0, [pc, #92]	; (80007cc <update7SEG+0x130>)
 800076e:	f001 f962 	bl	8001a36 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <update7SEG+0x134>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fe52 	bl	8000420 <display7SEG>
		break ;
 800077c:	e01d      	b.n	80007ba <update7SEG+0x11e>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	4811      	ldr	r0, [pc, #68]	; (80007c8 <update7SEG+0x12c>)
 8000784:	f001 f957 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <update7SEG+0x12c>)
 8000790:	f001 f951 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <update7SEG+0x130>)
 800079c:	f001 f94b 	bl	8001a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <update7SEG+0x130>)
 80007a8:	f001 f945 	bl	8001a36 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <update7SEG+0x134>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe35 	bl	8000420 <display7SEG>
		break ;
 80007b6:	e000      	b.n	80007ba <update7SEG+0x11e>
	default :
		break ;
 80007b8:	bf00      	nop
	}
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000044 	.word	0x20000044
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	40010800 	.word	0x40010800
 80007d0:	20000048 	.word	0x20000048

080007d4 <updateSEGBuffer>:
void updateSEGBuffer(int input[MAX_LED]){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<MAX_LED; i++) led_buffer[i] = input[i];
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e00b      	b.n	80007fa <updateSEGBuffer+0x26>
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	490f      	ldr	r1, [pc, #60]	; (800082c <updateSEGBuffer+0x58>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	2204      	movs	r2, #4
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4293      	cmp	r3, r2
 8000800:	dbef      	blt.n	80007e2 <updateSEGBuffer+0xe>
	if(timer_flag[1] == 1){
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <updateSEGBuffer+0x5c>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <updateSEGBuffer+0x4e>
		setTimer(LED7FREQ, 1);
 800080a:	2101      	movs	r1, #1
 800080c:	2001      	movs	r0, #1
 800080e:	f000 fcf5 	bl	80011fc <setTimer>
		update7SEG(index_led++);
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <updateSEGBuffer+0x60>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	4906      	ldr	r1, [pc, #24]	; (8000834 <updateSEGBuffer+0x60>)
 800081a:	600a      	str	r2, [r1, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff3d 	bl	800069c <update7SEG>
	}
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000048 	.word	0x20000048
 8000830:	200000ec 	.word	0x200000ec
 8000834:	20000044 	.word	0x20000044

08000838 <reset7SEG>:
void reset7SEG(){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
	index_led = 0;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <reset7SEG+0x28>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
	int ledbufferReset[4] = {0,0,0,0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
	updateSEGBuffer(ledbufferReset);
 8000850:	463b      	mov	r3, r7
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ffbe 	bl	80007d4 <updateSEGBuffer>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000044 	.word	0x20000044

08000864 <fsm_automatic_reset>:
//int flag_button_save = 0, flag_button_increase = 0, flag_button_mode = 0;
int status1 = INIT, status2 = INIT;
int counter1 = 0, counter2 = 0;
int inputLEDbuffer[4] = {0,0,0,0};

void fsm_automatic_reset(){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	setTimer(1000,3);
 8000868:	2103      	movs	r1, #3
 800086a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086e:	f000 fcc5 	bl	80011fc <setTimer>
	HAL_GPIO_TogglePin(TOGGLE_LED_GPIO_Port, TOGGLE_LED_Pin);
 8000872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000876:	4812      	ldr	r0, [pc, #72]	; (80008c0 <fsm_automatic_reset+0x5c>)
 8000878:	f001 f8f5 	bl	8001a66 <HAL_GPIO_TogglePin>
	counter1 = 0, counter2 = 0;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <fsm_automatic_reset+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <fsm_automatic_reset+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
	status1 = INIT, status2 = INIT;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <fsm_automatic_reset+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <fsm_automatic_reset+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	trafficDisplay1(INIT);
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fc59 	bl	800014c <trafficDisplay1>
	trafficDisplay2(INIT);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fcae 	bl	80001fc <trafficDisplay2>
	reset7SEG();
 80008a0:	f7ff ffca 	bl	8000838 <reset7SEG>

	LED_RED_temp = LED_RED_init;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <fsm_automatic_reset+0x70>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <fsm_automatic_reset+0x74>)
 80008aa:	6013      	str	r3, [r2, #0]
	LED_YELLOW_temp = LED_YELLOW_init;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <fsm_automatic_reset+0x78>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <fsm_automatic_reset+0x7c>)
 80008b2:	6013      	str	r3, [r2, #0]
	LED_GREEN_temp = LED_GREEN_init;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <fsm_automatic_reset+0x80>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <fsm_automatic_reset+0x84>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40010c00 	.word	0x40010c00
 80008c4:	20000060 	.word	0x20000060
 80008c8:	20000064 	.word	0x20000064
 80008cc:	20000058 	.word	0x20000058
 80008d0:	2000005c 	.word	0x2000005c
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000078 	.word	0x20000078
 80008dc:	20000004 	.word	0x20000004
 80008e0:	2000007c 	.word	0x2000007c
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000080 	.word	0x20000080

080008ec <fsm_automatic_run>:
void fsm_automatic_run(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	inputLEDbuffer[1] = counter1%10;
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 80008f2:	6819      	ldr	r1, [r3, #0]
 80008f4:	4b73      	ldr	r3, [pc, #460]	; (8000ac4 <fsm_automatic_run+0x1d8>)
 80008f6:	fb83 2301 	smull	r2, r3, r3, r1
 80008fa:	109a      	asrs	r2, r3, #2
 80008fc:	17cb      	asrs	r3, r1, #31
 80008fe:	1ad2      	subs	r2, r2, r3
 8000900:	4613      	mov	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	1aca      	subs	r2, r1, r3
 800090a:	4b6f      	ldr	r3, [pc, #444]	; (8000ac8 <fsm_automatic_run+0x1dc>)
 800090c:	605a      	str	r2, [r3, #4]
	inputLEDbuffer[0] = (counter1-inputLEDbuffer[1])/10;
 800090e:	4b6c      	ldr	r3, [pc, #432]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b6d      	ldr	r3, [pc, #436]	; (8000ac8 <fsm_automatic_run+0x1dc>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	4a6a      	ldr	r2, [pc, #424]	; (8000ac4 <fsm_automatic_run+0x1d8>)
 800091a:	fb82 1203 	smull	r1, r2, r2, r3
 800091e:	1092      	asrs	r2, r2, #2
 8000920:	17db      	asrs	r3, r3, #31
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	4a68      	ldr	r2, [pc, #416]	; (8000ac8 <fsm_automatic_run+0x1dc>)
 8000926:	6013      	str	r3, [r2, #0]
	inputLEDbuffer[3] = counter2%10;
 8000928:	4b68      	ldr	r3, [pc, #416]	; (8000acc <fsm_automatic_run+0x1e0>)
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <fsm_automatic_run+0x1d8>)
 800092e:	fb83 2301 	smull	r2, r3, r3, r1
 8000932:	109a      	asrs	r2, r3, #2
 8000934:	17cb      	asrs	r3, r1, #31
 8000936:	1ad2      	subs	r2, r2, r3
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	1aca      	subs	r2, r1, r3
 8000942:	4b61      	ldr	r3, [pc, #388]	; (8000ac8 <fsm_automatic_run+0x1dc>)
 8000944:	60da      	str	r2, [r3, #12]
	inputLEDbuffer[2] = (counter2-inputLEDbuffer[3])/10;
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b5f      	ldr	r3, [pc, #380]	; (8000ac8 <fsm_automatic_run+0x1dc>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a5c      	ldr	r2, [pc, #368]	; (8000ac4 <fsm_automatic_run+0x1d8>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1092      	asrs	r2, r2, #2
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	4a5a      	ldr	r2, [pc, #360]	; (8000ac8 <fsm_automatic_run+0x1dc>)
 800095e:	6093      	str	r3, [r2, #8]
	updateSEGBuffer(inputLEDbuffer);
 8000960:	4859      	ldr	r0, [pc, #356]	; (8000ac8 <fsm_automatic_run+0x1dc>)
 8000962:	f7ff ff37 	bl	80007d4 <updateSEGBuffer>

	if(timer_flag[0] == 1) {
 8000966:	4b5a      	ldr	r3, [pc, #360]	; (8000ad0 <fsm_automatic_run+0x1e4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d10e      	bne.n	800098c <fsm_automatic_run+0xa0>
		setTimer(1000, 0);
 800096e:	2100      	movs	r1, #0
 8000970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000974:	f000 fc42 	bl	80011fc <setTimer>
		counter1--, counter2--;
 8000978:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3b01      	subs	r3, #1
 800097e:	4a50      	ldr	r2, [pc, #320]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	4b52      	ldr	r3, [pc, #328]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	4a50      	ldr	r2, [pc, #320]	; (8000acc <fsm_automatic_run+0x1e0>)
 800098a:	6013      	str	r3, [r2, #0]
	}

	switch (status1){
 800098c:	4b51      	ldr	r3, [pc, #324]	; (8000ad4 <fsm_automatic_run+0x1e8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b03      	cmp	r3, #3
 8000992:	d847      	bhi.n	8000a24 <fsm_automatic_run+0x138>
 8000994:	a201      	add	r2, pc, #4	; (adr r2, 800099c <fsm_automatic_run+0xb0>)
 8000996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099a:	bf00      	nop
 800099c:	080009ad 	.word	0x080009ad
 80009a0:	080009cb 	.word	0x080009cb
 80009a4:	08000a07 	.word	0x08000a07
 80009a8:	080009e9 	.word	0x080009e9
				case INIT:
					if(counter1<=-1) {
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da06      	bge.n	80009c2 <fsm_automatic_run+0xd6>
						status1 = RED;
 80009b4:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <fsm_automatic_run+0x1e8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
						counter1 = LED_RED_init;
 80009ba:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <fsm_automatic_run+0x1ec>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a40      	ldr	r2, [pc, #256]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 80009c0:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(INIT);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff fbc2 	bl	800014c <trafficDisplay1>
					break;
 80009c8:	e02c      	b.n	8000a24 <fsm_automatic_run+0x138>
				case RED:
					if(counter1<=-1){
 80009ca:	4b3d      	ldr	r3, [pc, #244]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da06      	bge.n	80009e0 <fsm_automatic_run+0xf4>
						status1 = GREEN;
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <fsm_automatic_run+0x1e8>)
 80009d4:	2203      	movs	r2, #3
 80009d6:	601a      	str	r2, [r3, #0]
						counter1 = LED_GREEN_init;
 80009d8:	4b40      	ldr	r3, [pc, #256]	; (8000adc <fsm_automatic_run+0x1f0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a38      	ldr	r2, [pc, #224]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 80009de:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(RED);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff fbb3 	bl	800014c <trafficDisplay1>
					break;
 80009e6:	e01d      	b.n	8000a24 <fsm_automatic_run+0x138>
				case GREEN:
					if(counter1<=-1){
 80009e8:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da06      	bge.n	80009fe <fsm_automatic_run+0x112>
						status1 = YELLOW;
 80009f0:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <fsm_automatic_run+0x1e8>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
						counter1 = LED_YELLOW_init;
 80009f6:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <fsm_automatic_run+0x1f4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a31      	ldr	r2, [pc, #196]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 80009fc:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(GREEN);
 80009fe:	2003      	movs	r0, #3
 8000a00:	f7ff fba4 	bl	800014c <trafficDisplay1>
					break;
 8000a04:	e00e      	b.n	8000a24 <fsm_automatic_run+0x138>
				case YELLOW:
					if(counter1<=-1){
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da06      	bge.n	8000a1c <fsm_automatic_run+0x130>
						status1 = RED;
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <fsm_automatic_run+0x1e8>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
						counter1 = LED_RED_init;
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <fsm_automatic_run+0x1ec>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a29      	ldr	r2, [pc, #164]	; (8000ac0 <fsm_automatic_run+0x1d4>)
 8000a1a:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(YELLOW);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f7ff fb95 	bl	800014c <trafficDisplay1>
					break;
 8000a22:	bf00      	nop
		}
	switch (status2){
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <fsm_automatic_run+0x1f8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d847      	bhi.n	8000abc <fsm_automatic_run+0x1d0>
 8000a2c:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <fsm_automatic_run+0x148>)
 8000a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000a45 	.word	0x08000a45
 8000a38:	08000a63 	.word	0x08000a63
 8000a3c:	08000a9f 	.word	0x08000a9f
 8000a40:	08000a81 	.word	0x08000a81
			case INIT:
				if(counter2<=-1) {
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	da06      	bge.n	8000a5a <fsm_automatic_run+0x16e>
					status2 = GREEN;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <fsm_automatic_run+0x1f8>)
 8000a4e:	2203      	movs	r2, #3
 8000a50:	601a      	str	r2, [r3, #0]
					counter2 = LED_GREEN_init;
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <fsm_automatic_run+0x1f0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000a58:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(INIT);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fbce 	bl	80001fc <trafficDisplay2>
				break;
 8000a60:	e02c      	b.n	8000abc <fsm_automatic_run+0x1d0>
			case RED:
				if(counter2<=-1){
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da06      	bge.n	8000a78 <fsm_automatic_run+0x18c>
					status2 = GREEN;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <fsm_automatic_run+0x1f8>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	601a      	str	r2, [r3, #0]
					counter2 = LED_GREEN_init;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <fsm_automatic_run+0x1f0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a15      	ldr	r2, [pc, #84]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000a76:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(RED);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fbbf 	bl	80001fc <trafficDisplay2>
				break;
 8000a7e:	e01d      	b.n	8000abc <fsm_automatic_run+0x1d0>
			case GREEN:
				if(counter2<=-1){
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	da06      	bge.n	8000a96 <fsm_automatic_run+0x1aa>
					status2 = YELLOW;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <fsm_automatic_run+0x1f8>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
					counter2 = LED_YELLOW_init;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <fsm_automatic_run+0x1f4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000a94:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(GREEN);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f7ff fbb0 	bl	80001fc <trafficDisplay2>
				break;
 8000a9c:	e00e      	b.n	8000abc <fsm_automatic_run+0x1d0>
			case YELLOW:
				if(counter2<=-1){
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da06      	bge.n	8000ab4 <fsm_automatic_run+0x1c8>
					status2 = RED;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <fsm_automatic_run+0x1f8>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
					counter2 = LED_RED_init;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <fsm_automatic_run+0x1ec>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <fsm_automatic_run+0x1e0>)
 8000ab2:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(YELLOW);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f7ff fba1 	bl	80001fc <trafficDisplay2>
				break;
 8000aba:	bf00      	nop
	}
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000060 	.word	0x20000060
 8000ac4:	66666667 	.word	0x66666667
 8000ac8:	20000068 	.word	0x20000068
 8000acc:	20000064 	.word	0x20000064
 8000ad0:	200000ec 	.word	0x200000ec
 8000ad4:	20000058 	.word	0x20000058
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004
 8000ae4:	2000005c 	.word	0x2000005c

08000ae8 <fsm_manual>:


void fsm_manual(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
	int ledMatrix_in[4] = {0, (TRAFFIC_MODE -1 ), 0, 0};
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <fsm_manual+0x110>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
	switch(TRAFFIC_MODE){
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <fsm_manual+0x110>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d871      	bhi.n	8000bf0 <fsm_manual+0x108>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <fsm_manual+0x2c>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b25 	.word	0x08000b25
 8000b18:	08000b2b 	.word	0x08000b2b
 8000b1c:	08000b6d 	.word	0x08000b6d
 8000b20:	08000baf 	.word	0x08000baf
		case 1:
			fsm_automatic_run();
 8000b24:	f7ff fee2 	bl	80008ec <fsm_automatic_run>
		break;
 8000b28:	e062      	b.n	8000bf0 <fsm_manual+0x108>
		case 2:
			trafficToggle(RED);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fbc0 	bl	80002b0 <trafficToggle>
			ledMatrix_in[3] = LED_RED_temp%10;
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <fsm_manual+0x114>)
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <fsm_manual+0x118>)
 8000b36:	fb83 2301 	smull	r2, r3, r3, r1
 8000b3a:	109a      	asrs	r2, r3, #2
 8000b3c:	17cb      	asrs	r3, r1, #31
 8000b3e:	1ad2      	subs	r2, r2, r3
 8000b40:	4613      	mov	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	1aca      	subs	r2, r1, r3
 8000b4a:	60fa      	str	r2, [r7, #12]
			ledMatrix_in[2] = (LED_RED_temp-ledMatrix_in[3])/10;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <fsm_manual+0x114>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	4a2a      	ldr	r2, [pc, #168]	; (8000c00 <fsm_manual+0x118>)
 8000b56:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5a:	1092      	asrs	r2, r2, #2
 8000b5c:	17db      	asrs	r3, r3, #31
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	60bb      	str	r3, [r7, #8]
			updateSEGBuffer(ledMatrix_in);
 8000b62:	463b      	mov	r3, r7
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe35 	bl	80007d4 <updateSEGBuffer>

		break;
 8000b6a:	e041      	b.n	8000bf0 <fsm_manual+0x108>
		case 3:
			trafficToggle(YELLOW);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fb9f 	bl	80002b0 <trafficToggle>
			ledMatrix_in[3] = LED_YELLOW_temp%10;
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <fsm_manual+0x11c>)
 8000b74:	6819      	ldr	r1, [r3, #0]
 8000b76:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <fsm_manual+0x118>)
 8000b78:	fb83 2301 	smull	r2, r3, r3, r1
 8000b7c:	109a      	asrs	r2, r3, #2
 8000b7e:	17cb      	asrs	r3, r1, #31
 8000b80:	1ad2      	subs	r2, r2, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	1aca      	subs	r2, r1, r3
 8000b8c:	60fa      	str	r2, [r7, #12]
			ledMatrix_in[2] = (LED_YELLOW_temp-ledMatrix_in[3])/10;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <fsm_manual+0x11c>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <fsm_manual+0x118>)
 8000b98:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9c:	1092      	asrs	r2, r2, #2
 8000b9e:	17db      	asrs	r3, r3, #31
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	60bb      	str	r3, [r7, #8]
			updateSEGBuffer(ledMatrix_in);
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe14 	bl	80007d4 <updateSEGBuffer>

		break;
 8000bac:	e020      	b.n	8000bf0 <fsm_manual+0x108>
		case 4:
			trafficToggle(GREEN);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f7ff fb7e 	bl	80002b0 <trafficToggle>
			ledMatrix_in[3] = LED_GREEN_temp%10;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <fsm_manual+0x120>)
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <fsm_manual+0x118>)
 8000bba:	fb83 2301 	smull	r2, r3, r3, r1
 8000bbe:	109a      	asrs	r2, r3, #2
 8000bc0:	17cb      	asrs	r3, r1, #31
 8000bc2:	1ad2      	subs	r2, r2, r3
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	1aca      	subs	r2, r1, r3
 8000bce:	60fa      	str	r2, [r7, #12]
			ledMatrix_in[2] = (LED_GREEN_temp-ledMatrix_in[3])/10;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <fsm_manual+0x120>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <fsm_manual+0x118>)
 8000bda:	fb82 1203 	smull	r1, r2, r2, r3
 8000bde:	1092      	asrs	r2, r2, #2
 8000be0:	17db      	asrs	r3, r3, #31
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	60bb      	str	r3, [r7, #8]
			updateSEGBuffer(ledMatrix_in);
 8000be6:	463b      	mov	r3, r7
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fdf3 	bl	80007d4 <updateSEGBuffer>
		break;
 8000bee:	bf00      	nop
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	20000078 	.word	0x20000078
 8000c00:	66666667 	.word	0x66666667
 8000c04:	2000007c 	.word	0x2000007c
 8000c08:	20000080 	.word	0x20000080

08000c0c <InitTimerSet>:
#include "global.h"
int LED_RED_init = LED_RED_STARTING, LED_YELLOW_init = LED_YELLOW_STARTING, LED_GREEN_init = LED_GREEN_STARTING;
int LED_RED_temp = 0, LED_YELLOW_temp = 0, LED_GREEN_temp = 0;
int TRAFFIC_MODE = 1;

void InitTimerSet(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	setTimer(2000,0);						//TIMER RUN EVERY SECOND
 8000c10:	2100      	movs	r1, #0
 8000c12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c16:	f000 faf1 	bl	80011fc <setTimer>
	setTimer(1000,1);						//TIMER FOR FREQ OF 7SEG LED
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c20:	f000 faec 	bl	80011fc <setTimer>
	setTimer(1000,2);						//TIMER FOR FREQ OF MODE 2 AND 3
 8000c24:	2102      	movs	r1, #2
 8000c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2a:	f000 fae7 	bl	80011fc <setTimer>
	setTimer(1000,3);						//TIMER FOR TOGGLE_LED
 8000c2e:	2103      	movs	r1, #3
 8000c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c34:	f000 fae2 	bl	80011fc <setTimer>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <fsm_for_input_processing>:



enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED} ;

void fsm_for_input_processing ( void ){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	for(int i = 0; i< N0_OF_BUTTONS; i++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	e0cb      	b.n	8000de0 <fsm_for_input_processing+0x1a4>
		switch ( buttonState[i] ){
 8000c48:	4a6a      	ldr	r2, [pc, #424]	; (8000df4 <fsm_for_input_processing+0x1b8>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	f000 80af 	beq.w	8000db4 <fsm_for_input_processing+0x178>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	f300 80bf 	bgt.w	8000dda <fsm_for_input_processing+0x19e>
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <fsm_for_input_processing+0x2c>
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	f000 808b 	beq.w	8000d7c <fsm_for_input_processing+0x140>
 8000c66:	e0b8      	b.n	8000dda <fsm_for_input_processing+0x19e>
			case BUTTON_RELEASED :
				if( is_button_pressed (i)){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f95f 	bl	8000f30 <is_button_pressed>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d079      	beq.n	8000d6c <fsm_for_input_processing+0x130>
					buttonState[i] = BUTTON_PRESSED ;
 8000c78:	4a5e      	ldr	r2, [pc, #376]	; (8000df4 <fsm_for_input_processing+0x1b8>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	f200 80a3 	bhi.w	8000dd0 <fsm_for_input_processing+0x194>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <fsm_for_input_processing+0x54>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000cbf 	.word	0x08000cbf
 8000c98:	08000cfb 	.word	0x08000cfb
 8000c9c:	08000d37 	.word	0x08000d37
					// INCREASE VALUE OF PORT A BY ONE UNIT
					switch (i){
					case 0: fsm_automatic_reset();
 8000ca0:	f7ff fde0 	bl	8000864 <fsm_automatic_reset>
							TRAFFIC_MODE++;
 8000ca4:	4b54      	ldr	r3, [pc, #336]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a53      	ldr	r2, [pc, #332]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000cac:	6013      	str	r3, [r2, #0]
							if(TRAFFIC_MODE > 4) TRAFFIC_MODE = 1;
 8000cae:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	dd5c      	ble.n	8000d70 <fsm_for_input_processing+0x134>
 8000cb6:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
					break;
 8000cbc:	e058      	b.n	8000d70 <fsm_for_input_processing+0x134>
					case 1: switch(TRAFFIC_MODE){
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	d012      	beq.n	8000cec <fsm_for_input_processing+0xb0>
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	dc54      	bgt.n	8000d74 <fsm_for_input_processing+0x138>
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d002      	beq.n	8000cd4 <fsm_for_input_processing+0x98>
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d006      	beq.n	8000ce0 <fsm_for_input_processing+0xa4>
							case 3: LED_YELLOW_temp++;
								break;
							case 4: LED_GREEN_temp++;
								break;
							}
					break;
 8000cd2:	e04f      	b.n	8000d74 <fsm_for_input_processing+0x138>
							case 2: LED_RED_temp++;
 8000cd4:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <fsm_for_input_processing+0x1c0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a48      	ldr	r2, [pc, #288]	; (8000dfc <fsm_for_input_processing+0x1c0>)
 8000cdc:	6013      	str	r3, [r2, #0]
								break;
 8000cde:	e00b      	b.n	8000cf8 <fsm_for_input_processing+0xbc>
							case 3: LED_YELLOW_temp++;
 8000ce0:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <fsm_for_input_processing+0x1c4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a46      	ldr	r2, [pc, #280]	; (8000e00 <fsm_for_input_processing+0x1c4>)
 8000ce8:	6013      	str	r3, [r2, #0]
								break;
 8000cea:	e005      	b.n	8000cf8 <fsm_for_input_processing+0xbc>
							case 4: LED_GREEN_temp++;
 8000cec:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <fsm_for_input_processing+0x1c8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <fsm_for_input_processing+0x1c8>)
 8000cf4:	6013      	str	r3, [r2, #0]
								break;
 8000cf6:	bf00      	nop
					break;
 8000cf8:	e03c      	b.n	8000d74 <fsm_for_input_processing+0x138>
					case 2:
						 switch(TRAFFIC_MODE){
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d012      	beq.n	8000d28 <fsm_for_input_processing+0xec>
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	dc38      	bgt.n	8000d78 <fsm_for_input_processing+0x13c>
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d002      	beq.n	8000d10 <fsm_for_input_processing+0xd4>
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d006      	beq.n	8000d1c <fsm_for_input_processing+0xe0>
						 	 case 3: LED_YELLOW_temp--;
						 	 break;
						 	 case 4: LED_GREEN_temp--;
						 	 break;
						 	 }
					break;
 8000d0e:	e033      	b.n	8000d78 <fsm_for_input_processing+0x13c>
						 	 case 2: LED_RED_temp--;
 8000d10:	4b3a      	ldr	r3, [pc, #232]	; (8000dfc <fsm_for_input_processing+0x1c0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a39      	ldr	r2, [pc, #228]	; (8000dfc <fsm_for_input_processing+0x1c0>)
 8000d18:	6013      	str	r3, [r2, #0]
						 	 break;
 8000d1a:	e00b      	b.n	8000d34 <fsm_for_input_processing+0xf8>
						 	 case 3: LED_YELLOW_temp--;
 8000d1c:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <fsm_for_input_processing+0x1c4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <fsm_for_input_processing+0x1c4>)
 8000d24:	6013      	str	r3, [r2, #0]
						 	 break;
 8000d26:	e005      	b.n	8000d34 <fsm_for_input_processing+0xf8>
						 	 case 4: LED_GREEN_temp--;
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <fsm_for_input_processing+0x1c8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <fsm_for_input_processing+0x1c8>)
 8000d30:	6013      	str	r3, [r2, #0]
						 	 break;
 8000d32:	bf00      	nop
					break;
 8000d34:	e020      	b.n	8000d78 <fsm_for_input_processing+0x13c>
					case 3:
						LED_RED_init = LED_RED_temp;
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <fsm_for_input_processing+0x1c0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a33      	ldr	r2, [pc, #204]	; (8000e08 <fsm_for_input_processing+0x1cc>)
 8000d3c:	6013      	str	r3, [r2, #0]
						LED_YELLOW_init = LED_YELLOW_temp;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <fsm_for_input_processing+0x1c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a32      	ldr	r2, [pc, #200]	; (8000e0c <fsm_for_input_processing+0x1d0>)
 8000d44:	6013      	str	r3, [r2, #0]
						LED_GREEN_init = LED_GREEN_temp;
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <fsm_for_input_processing+0x1c8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <fsm_for_input_processing+0x1d4>)
 8000d4c:	6013      	str	r3, [r2, #0]
						TRAFFIC_MODE++;
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000d56:	6013      	str	r3, [r2, #0]
						if(TRAFFIC_MODE > 4) TRAFFIC_MODE = 1;
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	dd02      	ble.n	8000d66 <fsm_for_input_processing+0x12a>
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <fsm_for_input_processing+0x1bc>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
						fsm_automatic_reset();
 8000d66:	f7ff fd7d 	bl	8000864 <fsm_automatic_reset>
					break;
 8000d6a:	e006      	b.n	8000d7a <fsm_for_input_processing+0x13e>
					}
				}
 8000d6c:	bf00      	nop
 8000d6e:	e02f      	b.n	8000dd0 <fsm_for_input_processing+0x194>
					break;
 8000d70:	bf00      	nop
 8000d72:	e02d      	b.n	8000dd0 <fsm_for_input_processing+0x194>
					break;
 8000d74:	bf00      	nop
 8000d76:	e02b      	b.n	8000dd0 <fsm_for_input_processing+0x194>
					break;
 8000d78:	bf00      	nop
			break ;
 8000d7a:	e029      	b.n	8000dd0 <fsm_for_input_processing+0x194>
			case BUTTON_PRESSED :
				if (! is_button_pressed (i)){
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f8d5 	bl	8000f30 <is_button_pressed>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <fsm_for_input_processing+0x15c>
					buttonState[i] = BUTTON_RELEASED ;
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <fsm_for_input_processing+0x1b8>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
				} else {
					if( is_button_pressed_1s (i) ){
						buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
					}
				}
			break ;
 8000d96:	e01d      	b.n	8000dd4 <fsm_for_input_processing+0x198>
					if( is_button_pressed_1s (i) ){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f8e1 	bl	8000f64 <is_button_pressed_1s>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d015      	beq.n	8000dd4 <fsm_for_input_processing+0x198>
						buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <fsm_for_input_processing+0x1b8>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	2202      	movs	r2, #2
 8000db0:	701a      	strb	r2, [r3, #0]
			break ;
 8000db2:	e00f      	b.n	8000dd4 <fsm_for_input_processing+0x198>
			case BUTTON_PRESSED_MORE_THAN_1_SECOND :
				if (! is_button_pressed (i)){
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f8b9 	bl	8000f30 <is_button_pressed>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d109      	bne.n	8000dd8 <fsm_for_input_processing+0x19c>
					buttonState[i] = BUTTON_RELEASED ;
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <fsm_for_input_processing+0x1b8>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
				}
			break ;
 8000dce:	e003      	b.n	8000dd8 <fsm_for_input_processing+0x19c>
			break ;
 8000dd0:	bf00      	nop
 8000dd2:	e002      	b.n	8000dda <fsm_for_input_processing+0x19e>
			break ;
 8000dd4:	bf00      	nop
 8000dd6:	e000      	b.n	8000dda <fsm_for_input_processing+0x19e>
			break ;
 8000dd8:	bf00      	nop
	for(int i = 0; i< N0_OF_BUTTONS; i++){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	f77f af30 	ble.w	8000c48 <fsm_for_input_processing+0xc>
		}
	}
	fsm_manual();
 8000de8:	f7ff fe7e 	bl	8000ae8 <fsm_manual>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000084 	.word	0x20000084
 8000df8:	2000000c 	.word	0x2000000c
 8000dfc:	20000078 	.word	0x20000078
 8000e00:	2000007c 	.word	0x2000007c
 8000e04:	20000080 	.word	0x20000080
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	20000008 	.word	0x20000008

08000e14 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0,0,0,0};
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {0,0,0,0};

void button_reading(void){
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	e070      	b.n	8000f02 <button_reading+0xee>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	493b      	ldr	r1, [pc, #236]	; (8000f14 <button_reading+0x100>)
 8000e26:	5c89      	ldrb	r1, [r1, r2]
 8000e28:	4a3b      	ldr	r2, [pc, #236]	; (8000f18 <button_reading+0x104>)
 8000e2a:	54d1      	strb	r1, [r2, r3]
		switch(i){
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d833      	bhi.n	8000e9a <button_reading+0x86>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <button_reading+0x24>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e5d 	.word	0x08000e5d
 8000e40:	08000e71 	.word	0x08000e71
 8000e44:	08000e87 	.word	0x08000e87
			case 0: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port , BUTTON_0_Pin );
 8000e48:	79fc      	ldrb	r4, [r7, #7]
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	4833      	ldr	r0, [pc, #204]	; (8000f1c <button_reading+0x108>)
 8000e4e:	f000 fddb 	bl	8001a08 <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <button_reading+0x100>)
 8000e58:	551a      	strb	r2, [r3, r4]
			break;
 8000e5a:	e01e      	b.n	8000e9a <button_reading+0x86>
			case 1: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port , BUTTON_1_Pin );
 8000e5c:	79fc      	ldrb	r4, [r7, #7]
 8000e5e:	2104      	movs	r1, #4
 8000e60:	482e      	ldr	r0, [pc, #184]	; (8000f1c <button_reading+0x108>)
 8000e62:	f000 fdd1 	bl	8001a08 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <button_reading+0x100>)
 8000e6c:	551a      	strb	r2, [r3, r4]
			break;
 8000e6e:	e014      	b.n	8000e9a <button_reading+0x86>
			case 2: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port , BUTTON_2_Pin );
 8000e70:	79fc      	ldrb	r4, [r7, #7]
 8000e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e76:	4829      	ldr	r0, [pc, #164]	; (8000f1c <button_reading+0x108>)
 8000e78:	f000 fdc6 	bl	8001a08 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <button_reading+0x100>)
 8000e82:	551a      	strb	r2, [r3, r4]
			break;
 8000e84:	e009      	b.n	8000e9a <button_reading+0x86>
			case 3: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port , BUTTON_3_Pin );
 8000e86:	79fc      	ldrb	r4, [r7, #7]
 8000e88:	2108      	movs	r1, #8
 8000e8a:	4825      	ldr	r0, [pc, #148]	; (8000f20 <button_reading+0x10c>)
 8000e8c:	f000 fdbc 	bl	8001a08 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <button_reading+0x100>)
 8000e96:	551a      	strb	r2, [r3, r4]
			break;
 8000e98:	bf00      	nop
		}
		if( debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <button_reading+0x100>)
 8000e9e:	5cd2      	ldrb	r2, [r2, r3]
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	491d      	ldr	r1, [pc, #116]	; (8000f18 <button_reading+0x104>)
 8000ea4:	5ccb      	ldrb	r3, [r1, r3]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d105      	bne.n	8000eb6 <button_reading+0xa2>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000eaa:	79fa      	ldrb	r2, [r7, #7]
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4919      	ldr	r1, [pc, #100]	; (8000f14 <button_reading+0x100>)
 8000eb0:	5c89      	ldrb	r1, [r1, r2]
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <button_reading+0x110>)
 8000eb4:	54d1      	strb	r1, [r2, r3]

		if( buttonBuffer[i] == BUTTON_IS_PRESSED ){
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <button_reading+0x110>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d114      	bne.n	8000eea <button_reading+0xd6>
		// if a button is pressed , we start counting
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING ){
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <button_reading+0x114>)
 8000ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec8:	2b63      	cmp	r3, #99	; 0x63
 8000eca:	d809      	bhi.n	8000ee0 <button_reading+0xcc>
				counterForButtonPress1s[i]++;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <button_reading+0x114>)
 8000ed0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ed4:	3201      	adds	r2, #1
 8000ed6:	b291      	uxth	r1, r2
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <button_reading+0x114>)
 8000eda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ede:	e00d      	b.n	8000efc <button_reading+0xe8>
			} else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s[i] = 1;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <button_reading+0x118>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	54d1      	strb	r1, [r2, r3]
 8000ee8:	e008      	b.n	8000efc <button_reading+0xe8>
				//TODO
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <button_reading+0x114>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <button_reading+0x118>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	3301      	adds	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d98b      	bls.n	8000e20 <button_reading+0xc>
		}
	}
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000014 	.word	0x20000014
 8000f18:	20000018 	.word	0x20000018
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	40010c00 	.word	0x40010c00
 8000f24:	20000010 	.word	0x20000010
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	20000088 	.word	0x20000088

08000f30 <is_button_pressed>:
//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d901      	bls.n	8000f44 <is_button_pressed+0x14>
 8000f40:	2300      	movs	r3, #0
 8000f42:	e007      	b.n	8000f54 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <is_button_pressed+0x30>)
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000010 	.word	0x20000010

08000f64 <is_button_pressed_1s>:
//Checking a button is pressed more than a second or not
unsigned char is_button_pressed_1s ( unsigned char index ){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d901      	bls.n	8000f78 <is_button_pressed_1s+0x14>
 8000f74:	23ff      	movs	r3, #255	; 0xff
 8000f76:	e007      	b.n	8000f88 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <is_button_pressed_1s+0x30>)
 8000f7c:	5cd3      	ldrb	r3, [r2, r3]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000088 	.word	0x20000088

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 fa40 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f80e 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f894 	bl	80010d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa8:	f000 f846 	bl	8001038 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <main+0x24>)
 8000fae:	f001 f9ab 	bl	8002308 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  InitTimerSet();
 8000fb2:	f7ff fe2b 	bl	8000c0c <InitTimerSet>
  while (1)
  {
	  fsm_for_input_processing();
 8000fb6:	f7ff fe41 	bl	8000c3c <fsm_for_input_processing>
 8000fba:	e7fc      	b.n	8000fb6 <main+0x1e>
 8000fbc:	20000094 	.word	0x20000094

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b090      	sub	sp, #64	; 0x40
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	2228      	movs	r2, #40	; 0x28
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fd68 	bl	8002aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fea:	2310      	movs	r3, #16
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fd4e 	bl	8001a98 <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001002:	f000 f8f5 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f000 ffbb 	bl	8001f9c <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800102c:	f000 f8e0 	bl	80011f0 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	3740      	adds	r7, #64	; 0x40
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_TIM2_Init+0x94>)
 8001056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_TIM2_Init+0x94>)
 800105e:	f240 321f 	movw	r2, #799	; 0x31f
 8001062:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_TIM2_Init+0x94>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_TIM2_Init+0x94>)
 800106c:	2209      	movs	r2, #9
 800106e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_TIM2_Init+0x94>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_TIM2_Init+0x94>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <MX_TIM2_Init+0x94>)
 800107e:	f001 f8f3 	bl	8002268 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001088:	f000 f8b2 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <MX_TIM2_Init+0x94>)
 800109a:	f001 fa8f 	bl	80025bc <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010a4:	f000 f8a4 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_TIM2_Init+0x94>)
 80010b6:	f001 fc61 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010c0:	f000 f896 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000094 	.word	0x20000094

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <MX_GPIO_Init+0x110>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <MX_GPIO_Init+0x110>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <MX_GPIO_Init+0x110>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_GPIO_Init+0x110>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a37      	ldr	r2, [pc, #220]	; (80011e0 <MX_GPIO_Init+0x110>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_GPIO_Init+0x110>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <MX_GPIO_Init+0x110>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <MX_GPIO_Init+0x110>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <MX_GPIO_Init+0x110>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2183      	movs	r1, #131	; 0x83
 8001130:	482c      	ldr	r0, [pc, #176]	; (80011e4 <MX_GPIO_Init+0x114>)
 8001132:	f000 fc80 	bl	8001a36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|SEG4_Pin
 8001136:	2200      	movs	r2, #0
 8001138:	f240 31f3 	movw	r1, #1011	; 0x3f3
 800113c:	482a      	ldr	r0, [pc, #168]	; (80011e8 <MX_GPIO_Init+0x118>)
 800113e:	f000 fc7a 	bl	8001a36 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG2_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED2_Pin|EN1_Pin|TOGGLE_LED_Pin|EN0_Pin
 8001142:	2200      	movs	r2, #0
 8001144:	f248 7171 	movw	r1, #34673	; 0x8771
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <MX_GPIO_Init+0x11c>)
 800114a:	f000 fc74 	bl	8001a36 <HAL_GPIO_WritePin>
                          |TEST_Pin|SEG1_Pin|SEG6_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_GREEN2_Pin LED_YELLOW2_Pin SEG0_Pin */
  GPIO_InitStruct.Pin = LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0_Pin;
 800114e:	2383      	movs	r3, #131	; 0x83
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	4619      	mov	r1, r3
 8001164:	481f      	ldr	r0, [pc, #124]	; (80011e4 <MX_GPIO_Init+0x114>)
 8001166:	f000 facb 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin SEG4_Pin
                           SEG3_Pin SEG2_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|SEG4_Pin
 800116a:	f240 33f3 	movw	r3, #1011	; 0x3f3
 800116e:	613b      	str	r3, [r7, #16]
                          |SEG3_Pin|SEG2_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	4819      	ldr	r0, [pc, #100]	; (80011e8 <MX_GPIO_Init+0x118>)
 8001184:	f000 fabc 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin|BUTTON_2_Pin;
 8001188:	f240 430c 	movw	r3, #1036	; 0x40c
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <MX_GPIO_Init+0x118>)
 800119e:	f000 faaf 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED2_Pin EN1_Pin TOGGLE_LED_Pin EN0_Pin
                           TEST_Pin SEG1_Pin SEG6_Pin SEG5_Pin */
  GPIO_InitStruct.Pin = LED_RED2_Pin|EN1_Pin|TOGGLE_LED_Pin|EN0_Pin
 80011a2:	f248 7371 	movw	r3, #34673	; 0x8771
 80011a6:	613b      	str	r3, [r7, #16]
                          |TEST_Pin|SEG1_Pin|SEG6_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_GPIO_Init+0x11c>)
 80011bc:	f000 faa0 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin;
 80011c0:	2308      	movs	r3, #8
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_GPIO_Init+0x11c>)
 80011d4:	f000 fa94 	bl	8001700 <HAL_GPIO_Init>

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <setTimer>:
const int TIMER_CYCLE = 1;

int timer_counter[NO_OF_TIMER] = {0, 0, 0, 0};
int timer_flag[NO_OF_TIMER] = {0, 0, 0, 0};

void setTimer(int duration, int T_index){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	timer_counter[T_index] = duration/TIMER_CYCLE;
 8001206:	2201      	movs	r2, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	fb93 f2f2 	sdiv	r2, r3, r2
 800120e:	4907      	ldr	r1, [pc, #28]	; (800122c <setTimer+0x30>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[T_index] = 0;
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <setTimer+0x34>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2100      	movs	r1, #0
 800121c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200000dc 	.word	0x200000dc
 8001230:	200000ec 	.word	0x200000ec

08001234 <timerRun>:

void timerRun(){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	e01c      	b.n	800127a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <timerRun+0x58>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dd13      	ble.n	8001274 <timerRun+0x40>
			timer_counter[i]--;
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <timerRun+0x58>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001254:	1e5a      	subs	r2, r3, #1
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <timerRun+0x58>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <timerRun+0x58>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	2b00      	cmp	r3, #0
 8001268:	dc04      	bgt.n	8001274 <timerRun+0x40>
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <timerRun+0x5c>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2101      	movs	r1, #1
 8001270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3301      	adds	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b03      	cmp	r3, #3
 800127e:	dddf      	ble.n	8001240 <timerRun+0xc>
		}
	}
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	200000dc 	.word	0x200000dc
 8001290:	200000ec 	.word	0x200000ec

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_MspInit+0x60>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_MspInit+0x60>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d113      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_Base_MspInit+0x44>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201c      	movs	r0, #28
 8001328:	f000 f9b3 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800132c:	201c      	movs	r0, #28
 800132e:	f000 f9cc 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f891 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM2_IRQHandler+0x10>)
 8001396:	f001 f809 	bl	80023ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000094 	.word	0x20000094

080013a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Admin
 */

#include "timer.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 80013c2:	f7ff fd27 	bl	8000e14 <button_reading>
	}
	timerRun();
 80013c6:	f7ff ff35 	bl	8001234 <timerRun>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013fa:	f7ff ffd3 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f001 fb2d 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001402:	f7ff fdc9 	bl	8000f98 <main>
  bx lr
 8001406:	4770      	bx	lr
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001410:	08002b9c 	.word	0x08002b9c
  ldr r2, =_sbss
 8001414:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001418:	20000100 	.word	0x20000100

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f923 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff ff2a 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f93b 	bl	80016e6 <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f903 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000001c 	.word	0x2000001c
 80014a4:	20000024 	.word	0x20000024
 80014a8:	20000020 	.word	0x20000020

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000024 	.word	0x20000024
 80014cc:	200000fc 	.word	0x200000fc

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	200000fc 	.word	0x200000fc

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4906      	ldr	r1, [pc, #24]	; (800157c <__NVIC_EnableIRQ+0x34>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff90 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff2d 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff42 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff90 	bl	80015d4 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5f 	bl	8001580 <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff35 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b08b      	sub	sp, #44	; 0x2c
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e169      	b.n	80019e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001714:	2201      	movs	r2, #1
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	429a      	cmp	r2, r3
 800172e:	f040 8158 	bne.w	80019e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4a9a      	ldr	r2, [pc, #616]	; (80019a0 <HAL_GPIO_Init+0x2a0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d05e      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 800173c:	4a98      	ldr	r2, [pc, #608]	; (80019a0 <HAL_GPIO_Init+0x2a0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d875      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001742:	4a98      	ldr	r2, [pc, #608]	; (80019a4 <HAL_GPIO_Init+0x2a4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d058      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001748:	4a96      	ldr	r2, [pc, #600]	; (80019a4 <HAL_GPIO_Init+0x2a4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d86f      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800174e:	4a96      	ldr	r2, [pc, #600]	; (80019a8 <HAL_GPIO_Init+0x2a8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d052      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001754:	4a94      	ldr	r2, [pc, #592]	; (80019a8 <HAL_GPIO_Init+0x2a8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d869      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800175a:	4a94      	ldr	r2, [pc, #592]	; (80019ac <HAL_GPIO_Init+0x2ac>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04c      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 8001760:	4a92      	ldr	r2, [pc, #584]	; (80019ac <HAL_GPIO_Init+0x2ac>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d863      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001766:	4a92      	ldr	r2, [pc, #584]	; (80019b0 <HAL_GPIO_Init+0x2b0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d046      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
 800176c:	4a90      	ldr	r2, [pc, #576]	; (80019b0 <HAL_GPIO_Init+0x2b0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d85d      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 8001772:	2b12      	cmp	r3, #18
 8001774:	d82a      	bhi.n	80017cc <HAL_GPIO_Init+0xcc>
 8001776:	2b12      	cmp	r3, #18
 8001778:	d859      	bhi.n	800182e <HAL_GPIO_Init+0x12e>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <HAL_GPIO_Init+0x80>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	080017fb 	.word	0x080017fb
 8001784:	080017d5 	.word	0x080017d5
 8001788:	080017e7 	.word	0x080017e7
 800178c:	08001829 	.word	0x08001829
 8001790:	0800182f 	.word	0x0800182f
 8001794:	0800182f 	.word	0x0800182f
 8001798:	0800182f 	.word	0x0800182f
 800179c:	0800182f 	.word	0x0800182f
 80017a0:	0800182f 	.word	0x0800182f
 80017a4:	0800182f 	.word	0x0800182f
 80017a8:	0800182f 	.word	0x0800182f
 80017ac:	0800182f 	.word	0x0800182f
 80017b0:	0800182f 	.word	0x0800182f
 80017b4:	0800182f 	.word	0x0800182f
 80017b8:	0800182f 	.word	0x0800182f
 80017bc:	0800182f 	.word	0x0800182f
 80017c0:	0800182f 	.word	0x0800182f
 80017c4:	080017dd 	.word	0x080017dd
 80017c8:	080017f1 	.word	0x080017f1
 80017cc:	4a79      	ldr	r2, [pc, #484]	; (80019b4 <HAL_GPIO_Init+0x2b4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017d2:	e02c      	b.n	800182e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e029      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	3304      	adds	r3, #4
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e024      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	3308      	adds	r3, #8
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e01f      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	330c      	adds	r3, #12
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e01a      	b.n	8001830 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001802:	2304      	movs	r3, #4
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e013      	b.n	8001830 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001810:	2308      	movs	r3, #8
 8001812:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	611a      	str	r2, [r3, #16]
          break;
 800181a:	e009      	b.n	8001830 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800181c:	2308      	movs	r3, #8
 800181e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	615a      	str	r2, [r3, #20]
          break;
 8001826:	e003      	b.n	8001830 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
          break;
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x130>
          break;
 800182e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d801      	bhi.n	800183a <HAL_GPIO_Init+0x13a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	e001      	b.n	800183e <HAL_GPIO_Init+0x13e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d802      	bhi.n	800184c <HAL_GPIO_Init+0x14c>
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x152>
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	3b08      	subs	r3, #8
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	210f      	movs	r1, #15
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	6a39      	ldr	r1, [r7, #32]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80b1 	beq.w	80019e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x2b8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <HAL_GPIO_Init+0x2b8>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <HAL_GPIO_Init+0x2b8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001898:	4a48      	ldr	r2, [pc, #288]	; (80019bc <HAL_GPIO_Init+0x2bc>)
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <HAL_GPIO_Init+0x2c0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d013      	beq.n	80018ec <HAL_GPIO_Init+0x1ec>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3f      	ldr	r2, [pc, #252]	; (80019c4 <HAL_GPIO_Init+0x2c4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00d      	beq.n	80018e8 <HAL_GPIO_Init+0x1e8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_Init+0x1e4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_GPIO_Init+0x1e0>
 80018dc:	2303      	movs	r3, #3
 80018de:	e006      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_Init+0x1ee>
 80018ec:	2300      	movs	r3, #0
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018fe:	492f      	ldr	r1, [pc, #188]	; (80019bc <HAL_GPIO_Init+0x2bc>)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	492c      	ldr	r1, [pc, #176]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4928      	ldr	r1, [pc, #160]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001930:	4013      	ands	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4922      	ldr	r1, [pc, #136]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	491e      	ldr	r1, [pc, #120]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001958:	4013      	ands	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4918      	ldr	r1, [pc, #96]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4914      	ldr	r1, [pc, #80]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d021      	beq.n	80019d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e021      	b.n	80019e2 <HAL_GPIO_Init+0x2e2>
 800199e:	bf00      	nop
 80019a0:	10320000 	.word	0x10320000
 80019a4:	10310000 	.word	0x10310000
 80019a8:	10220000 	.word	0x10220000
 80019ac:	10210000 	.word	0x10210000
 80019b0:	10120000 	.word	0x10120000
 80019b4:	10110000 	.word	0x10110000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40010800 	.word	0x40010800
 80019c4:	40010c00 	.word	0x40010c00
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40011400 	.word	0x40011400
 80019d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	43db      	mvns	r3, r3
 80019dc:	4909      	ldr	r1, [pc, #36]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80019de:	4013      	ands	r3, r2
 80019e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	3301      	adds	r3, #1
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	fa22 f303 	lsr.w	r3, r2, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f ae8e 	bne.w	8001714 <HAL_GPIO_Init+0x14>
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	372c      	adds	r7, #44	; 0x2c
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40010400 	.word	0x40010400

08001a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e001      	b.n	8001a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	807b      	strh	r3, [r7, #2]
 8001a42:	4613      	mov	r3, r2
 8001a44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a46:	787b      	ldrb	r3, [r7, #1]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4c:	887a      	ldrh	r2, [r7, #2]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a52:	e003      	b.n	8001a5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	041a      	lsls	r2, r3, #16
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a78:	887a      	ldrh	r2, [r7, #2]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	400b      	ands	r3, r1
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	611a      	str	r2, [r3, #16]
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e272      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab8:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
 8001ad0:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d168      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e24c      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x76>
 8001b00:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a7f      	ldr	r2, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e02e      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b16:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7a      	ldr	r2, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a77      	ldr	r2, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xbc>
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a71      	ldr	r2, [pc, #452]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b54:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fcac 	bl	80014d0 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fca8 	bl	80014d0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e200      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe4>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc98 	bl	80014d0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fc94 	bl	80014d0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1ec      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x10c>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d063      	beq.n	8001c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d11c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1c0      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4939      	ldr	r1, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e03a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fc4d 	bl	80014d0 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fc49 	bl	80014d0 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1a1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4927      	ldr	r1, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fc2c 	bl	80014d0 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc28 	bl	80014d0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e180      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03a      	beq.n	8001d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fc0c 	bl	80014d0 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fc08 	bl	80014d0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e160      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 faa6 	bl	800222c <RCC_Delay>
 8001ce0:	e01c      	b.n	8001d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fbf2 	bl	80014d0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	e00f      	b.n	8001d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fbee 	bl	80014d0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d908      	bls.n	8001d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e146      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	42420000 	.word	0x42420000
 8001d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e9      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a6 	beq.w	8001e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a87      	ldr	r2, [pc, #540]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fbaf 	bl	80014d0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fbab 	bl	80014d0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e103      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x312>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x334>
 8001db2:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x356>
 8001dd4:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dee:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a5a      	ldr	r2, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a57      	ldr	r2, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb5f 	bl	80014d0 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb5b 	bl	80014d0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x37e>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb49 	bl	80014d0 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb45 	bl	80014d0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d061      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d146      	bne.n	8001f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fb19 	bl	80014d0 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff fb15 	bl	80014d0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e06d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4921      	ldr	r1, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a19      	ldr	r1, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	430b      	orrs	r3, r1
 8001eee:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fae9 	bl	80014d0 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff fae5 	bl	80014d0 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e03d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46a>
 8001f20:	e035      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fad2 	bl	80014d0 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff face 	bl	80014d0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e026      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x498>
 8001f4e:	e01e      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e019      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x500>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d0      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d910      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4965      	ldr	r1, [pc, #404]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b8      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800201a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	494d      	ldr	r1, [pc, #308]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d040      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d115      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e07f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e073      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06b      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4936      	ldr	r1, [pc, #216]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7ff fa20 	bl	80014d0 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff fa1c 	bl	80014d0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e053      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d210      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4922      	ldr	r1, [pc, #136]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e032      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4916      	ldr	r1, [pc, #88]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	490e      	ldr	r1, [pc, #56]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212a:	f000 f821 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800212e:	4602      	mov	r2, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	490a      	ldr	r1, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	5ccb      	ldrb	r3, [r1, r3]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1cc>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f97e 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40022000 	.word	0x40022000
 8002160:	40021000 	.word	0x40021000
 8002164:	08002b84 	.word	0x08002b84
 8002168:	2000001c 	.word	0x2000001c
 800216c:	20000020 	.word	0x20000020

08002170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b490      	push	{r4, r7}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002176:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_RCC_GetSysClockFreq+0xac>)
 8002178:	1d3c      	adds	r4, r7, #4
 800217a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800217c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002180:	f240 2301 	movw	r3, #513	; 0x201
 8002184:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x40>
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x46>
 80021ae:	e02b      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b2:	623b      	str	r3, [r7, #32]
      break;
 80021b4:	e02b      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	0c9b      	lsrs	r3, r3, #18
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3328      	adds	r3, #40	; 0x28
 80021c0:	443b      	add	r3, r7
 80021c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0c5b      	lsrs	r3, r3, #17
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	3328      	adds	r3, #40	; 0x28
 80021de:	443b      	add	r3, r7
 80021e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	e004      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	623b      	str	r3, [r7, #32]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb4>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	6a3b      	ldr	r3, [r7, #32]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bc90      	pop	{r4, r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	08002b74 	.word	0x08002b74
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	003d0900 	.word	0x003d0900

0800222c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <RCC_Delay+0x34>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <RCC_Delay+0x38>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a5b      	lsrs	r3, r3, #9
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002248:	bf00      	nop
  }
  while (Delay --);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <RCC_Delay+0x1c>
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	2000001c 	.word	0x2000001c
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e041      	b.n	80022fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff f832 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f000 fa70 	bl	800278c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d001      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e03a      	b.n	8002396 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <HAL_TIM_Base_Start_IT+0x98>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00e      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x58>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d009      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x58>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x58>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d111      	bne.n	8002384 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d010      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002382:	e007      	b.n	8002394 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40000800 	.word	0x40000800

080023ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d122      	bne.n	8002408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d11b      	bne.n	8002408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0202 	mvn.w	r2, #2
 80023d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9b1 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f9a4 	bl	8002744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f9b3 	bl	8002768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b04      	cmp	r3, #4
 8002414:	d122      	bne.n	800245c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b04      	cmp	r3, #4
 8002422:	d11b      	bne.n	800245c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0204 	mvn.w	r2, #4
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f987 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f97a 	bl	8002744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f989 	bl	8002768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b08      	cmp	r3, #8
 8002468:	d122      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b08      	cmp	r3, #8
 8002476:	d11b      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0208 	mvn.w	r2, #8
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2204      	movs	r2, #4
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f95d 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f950 	bl	8002744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f95f 	bl	8002768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0210 	mvn.w	r2, #16
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2208      	movs	r2, #8
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f933 	bl	8002756 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f926 	bl	8002744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f935 	bl	8002768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10e      	bne.n	8002530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0201 	mvn.w	r2, #1
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe ff40 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	d10e      	bne.n	800255c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d107      	bne.n	800255c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa77 	bl	8002a4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d107      	bne.n	8002588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8f9 	bl	800277a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	d10e      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d107      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0220 	mvn.w	r2, #32
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa42 	bl	8002a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_TIM_ConfigClockSource+0x18>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0b3      	b.n	800273c <HAL_TIM_ConfigClockSource+0x180>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260c:	d03e      	beq.n	800268c <HAL_TIM_ConfigClockSource+0xd0>
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002612:	f200 8087 	bhi.w	8002724 <HAL_TIM_ConfigClockSource+0x168>
 8002616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261a:	f000 8085 	beq.w	8002728 <HAL_TIM_ConfigClockSource+0x16c>
 800261e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002622:	d87f      	bhi.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
 8002624:	2b70      	cmp	r3, #112	; 0x70
 8002626:	d01a      	beq.n	800265e <HAL_TIM_ConfigClockSource+0xa2>
 8002628:	2b70      	cmp	r3, #112	; 0x70
 800262a:	d87b      	bhi.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
 800262c:	2b60      	cmp	r3, #96	; 0x60
 800262e:	d050      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x116>
 8002630:	2b60      	cmp	r3, #96	; 0x60
 8002632:	d877      	bhi.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
 8002634:	2b50      	cmp	r3, #80	; 0x50
 8002636:	d03c      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0xf6>
 8002638:	2b50      	cmp	r3, #80	; 0x50
 800263a:	d873      	bhi.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d058      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0x136>
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d86f      	bhi.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
 8002644:	2b30      	cmp	r3, #48	; 0x30
 8002646:	d064      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x156>
 8002648:	2b30      	cmp	r3, #48	; 0x30
 800264a:	d86b      	bhi.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
 800264c:	2b20      	cmp	r3, #32
 800264e:	d060      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x156>
 8002650:	2b20      	cmp	r3, #32
 8002652:	d867      	bhi.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05c      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x156>
 8002658:	2b10      	cmp	r3, #16
 800265a:	d05a      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800265c:	e062      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f000 f966 	bl	800293e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002680:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	609a      	str	r2, [r3, #8]
      break;
 800268a:	e04e      	b.n	800272a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f000 f94f 	bl	800293e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ae:	609a      	str	r2, [r3, #8]
      break;
 80026b0:	e03b      	b.n	800272a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	461a      	mov	r2, r3
 80026c0:	f000 f8c6 	bl	8002850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2150      	movs	r1, #80	; 0x50
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f91d 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 80026d0:	e02b      	b.n	800272a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	461a      	mov	r2, r3
 80026e0:	f000 f8e4 	bl	80028ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2160      	movs	r1, #96	; 0x60
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f90d 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 80026f0:	e01b      	b.n	800272a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	461a      	mov	r2, r3
 8002700:	f000 f8a6 	bl	8002850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2140      	movs	r1, #64	; 0x40
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f8fd 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 8002710:	e00b      	b.n	800272a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f000 f8f4 	bl	800290a <TIM_ITRx_SetConfig>
        break;
 8002722:	e002      	b.n	800272a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002724:	bf00      	nop
 8002726:	e000      	b.n	800272a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002728:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a29      	ldr	r2, [pc, #164]	; (8002844 <TIM_Base_SetConfig+0xb8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00b      	beq.n	80027bc <TIM_Base_SetConfig+0x30>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d007      	beq.n	80027bc <TIM_Base_SetConfig+0x30>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a26      	ldr	r2, [pc, #152]	; (8002848 <TIM_Base_SetConfig+0xbc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0x30>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a25      	ldr	r2, [pc, #148]	; (800284c <TIM_Base_SetConfig+0xc0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d108      	bne.n	80027ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <TIM_Base_SetConfig+0xb8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00b      	beq.n	80027ee <TIM_Base_SetConfig+0x62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d007      	beq.n	80027ee <TIM_Base_SetConfig+0x62>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <TIM_Base_SetConfig+0xbc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_Base_SetConfig+0x62>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a18      	ldr	r2, [pc, #96]	; (800284c <TIM_Base_SetConfig+0xc0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d108      	bne.n	8002800 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <TIM_Base_SetConfig+0xb8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d103      	bne.n	8002834 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	615a      	str	r2, [r3, #20]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800

08002850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0201 	bic.w	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 030a 	bic.w	r3, r3, #10
 800288c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f023 0210 	bic.w	r2, r3, #16
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	031b      	lsls	r3, r3, #12
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	621a      	str	r2, [r3, #32]
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	f043 0307 	orr.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293e:	b480      	push	{r7}
 8002940:	b087      	sub	sp, #28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	431a      	orrs	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4313      	orrs	r3, r2
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	609a      	str	r2, [r3, #8]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002990:	2302      	movs	r3, #2
 8002992:	e046      	b.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d009      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10c      	bne.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800

08002a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2600      	movs	r6, #0
 8002a60:	4d0c      	ldr	r5, [pc, #48]	; (8002a94 <__libc_init_array+0x38>)
 8002a62:	4c0d      	ldr	r4, [pc, #52]	; (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	f000 f822 	bl	8002ab4 <_init>
 8002a70:	2600      	movs	r6, #0
 8002a72:	4d0a      	ldr	r5, [pc, #40]	; (8002a9c <__libc_init_array+0x40>)
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08002b94 	.word	0x08002b94
 8002a98:	08002b94 	.word	0x08002b94
 8002a9c:	08002b94 	.word	0x08002b94
 8002aa0:	08002b98 	.word	0x08002b98

08002aa4 <memset>:
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4402      	add	r2, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d100      	bne.n	8002aae <memset+0xa>
 8002aac:	4770      	bx	lr
 8002aae:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab2:	e7f9      	b.n	8002aa8 <memset+0x4>

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
